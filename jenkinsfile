pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'sam-image' 
        DOCKER_NETWORK = 'sam_network'
        TRIVY_REPORT = 'trivy-report.json'  // File name for the Trivy output
    }
    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    // Clean up any existing Docker containers or networks if necessary
                    sh "docker network rm ${DOCKER_NETWORK} || true" // Remove network if exists
                    sh "docker rm -f ${DOCKER_IMAGE}-container || true" // Remove existing container
                    sh "docker rmi ${DOCKER_IMAGE} || true" // Remove image if exists
                }
            }
        }

        stage('Create Network') {
            steps {
                script {
                    // Create a custom Docker network
                    sh "docker network create ${DOCKER_NETWORK}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the Docker container on the created network
                    sh "docker run -d --name ${DOCKER_IMAGE}-container --network ${DOCKER_NETWORK} ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Run Trivy Scan') {
            steps {
                script {
                    // Run the Trivy scan on the Docker image and save the output
                    sh "trivy image --format json --output ${TRIVY_REPORT} ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Archive Trivy Report') {
            steps {
                script {
                    // Archive the Trivy report as a build artifact
                    archiveArtifacts artifacts: "${TRIVY_REPORT}", allowEmptyArchive: true
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    // Optionally clean up containers/images if you don't need to keep them
                    sh "docker rm -f ${DOCKER_IMAGE}-container"
                    sh "docker rmi ${DOCKER_IMAGE}"
                }
            }
        }
    }
    post {
        success {
            echo 'Deployment was successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
