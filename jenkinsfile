pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'sam-image' 
        DOCKER_NETWORK = 'my_custom_network'
        TRIVY_REPORT = 'trivy-report.json'  // File name for the Trivy output
    }
    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    // Clean up any existing Docker containers or networks if necessary
                    sh '''
                    # Check if network exists and has active endpoints before removing
                    if docker network ls --filter name=${DOCKER_NETWORK} -q; then
                        echo "Removing existing network ${DOCKER_NETWORK}"
                        docker network rm ${DOCKER_NETWORK} || true
                    fi
                    
                    # Remove existing container
                    docker rm -f ${DOCKER_IMAGE}-container || true
                    
                    # Remove existing image
                    docker rmi ${DOCKER_IMAGE} || true
                    '''
                }
            }
        }

        stage('Create Network') {
            steps {
                script {
                    // Create a custom Docker network, but check if it already exists first
                    sh '''
                    if ! docker network ls --filter name=${DOCKER_NETWORK} -q; then
                        echo "Creating Docker network ${DOCKER_NETWORK}"
                        docker network create ${DOCKER_NETWORK}
                    else
                        echo "Network ${DOCKER_NETWORK} already exists."
                    fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the Docker container on the created network
                    sh "docker run -d --name ${DOCKER_IMAGE}-container --network ${DOCKER_NETWORK} ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    // Run the unit tests inside the running container
                    sh "docker exec ${DOCKER_IMAGE}-container python3 test_app.py"
                }
            }
        }

        stage('Run Trivy Scan') {
            steps {
                script {
                    // Run the Trivy scan on the Docker image and save the output
                    sh "trivy image --format json --output ${TRIVY_REPORT} ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Archive Trivy Report') {
            steps {
                script {
                    // Archive the Trivy report as a build artifact
                    archiveArtifacts artifacts: "${TRIVY_REPORT}", allowEmptyArchive: true
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    // Optionally clean up containers/images if you don't need to keep them
                    sh "docker rm -f ${DOCKER_IMAGE}-container"
                    sh "docker rmi ${DOCKER_IMAGE}"
                }
            }
        }
    }
    post {
        success {
            echo 'Deployment was successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
